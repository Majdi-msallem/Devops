properties([pipelineTriggers([githubPush()])])
pipeline{
    agent any 
          tools { 
        maven "M2_HOME" 
        }
        environment {
    registry = "majdimsallem/devops"
        registryCredential='dockerhub_id'
        dockerImage=''
         NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "192.168.1.13:8081"
        NEXUS_REPOSITORY = "maven-nexus-repo" 
        NEXUS_CREDENTIAL_ID = "nexus-user-credentials"
    }
        stages {
            stage('Checkout GIT ') {
                steps {
                    echo 'cheking Git hub Repo ...';
                    git branch : 'master',
                    url : 'https://github.com/Majdi-msallem/Devops.git'
                }
            }
           

            stage('git clone') {
            steps {
               git branch: 'master', 
               url: 'https://github.com/Majdi-msallem/Devops.git'
            }
        }
          stage('MVN CLEAN INSTALL'){
            steps {
                sh 'mvn clean install -DskipTests'
            }
        }
        stage ('JUnit / Mockito Test'){
            steps{
                sh 'mvn test'
                }
            }

        /*
 stage('SonarQube analysis') {
//    def scannerHome = tool 'SonarScanner 4.0';
        steps{
        withSonarQubeEnv('sonarqube-8.9.7') { 
        // If you have configured more than one global server connection, you can specify its name
//      sh "${scannerHome}/bin/sonar-scanner"
        sh "mvn sonar:sonar"
    }
        }
        } 

 stage("Publish to Nexus Repository Manager") {
            steps {
                script {
                    pom = readMavenPom file: "pom.xml";
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    artifactPath = filesByGlob[0].path;
                    artifactExists = fileExists artifactPath;
                    if(artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: pom.version,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: "pom.xml",
                                type: "pom"]
                            ]
                        );
                    } else {
                        error "*** File: ${artifactPath}, could not be found";
                    }
                }
            }
        }       






          stage('MVN CLEAN INSTALL'){
            steps {
                sh 'mvn clean install -DskipTests'
            }
        }
           stage ('JUnit / Mockito Test'){
            steps{
                sh 'mvn test'
                }
            }


              
        

stage("Maven Build") {
            steps {
                script {
                    sh "mvn package -DskipTests=true"
                }
            }
        } 

        
         stage('Building our image') { 
            steps { 
                script { 
                    dockerImage = docker.build registry + ":$BUILD_NUMBER" 
                }
            } 
        }
       stage('Deploy our image') { 
            steps { 
                script { 
                    docker.withRegistry( '', registryCredential ) { 
                        dockerImage.push() 
                    }
                } 
            }
        } 
   
       
        stage('Cleaning up') { 
            steps { 
                sh "docker rmi $registry:$BUILD_NUMBER" 
            }
        } 
         
         stage('Email notification') {
            steps {
                mail bcc: '', body: 'All containers are up', cc: '', from: '', replyTo: '', subject: 'Jenkins-Dockerhub Alert', to: 'majdi.msallem@esprit.tn'
            }
        }
       

        
        
       /*        
        
         stage('Building our image') { 
            steps { 
                script { 
                    dockerImage = docker.build registry + ":$BUILD_NUMBER" 
                }
            } 
        }
       stage('Deploy our image') { 
            steps { 
                script { 
                    docker.withRegistry( '', registryCredential ) { 
                        dockerImage.push() 
                    }
                } 
            }
        } 
   
       
        stage('Cleaning up') { 
            steps { 
                sh "docker rmi $registry:$BUILD_NUMBER" 
            }
        } */


         /*  stage('MVN Nexus'){
            steps {
                sh 'mvn deploy -e -X -DskipTests=true'
            }
        } 

        }
        /*
        
     post {
        success {
            emailext  body: 'Le pipeline que vous venez de lancer est achevé avec succé', recipientProviders: [buildUser()], subject: 'Build réussi', to: 'yasmine.manita@esprit.tn'
        }
        failure{
            emailext attachLog: true, body: 'Le pipeline que vous vener de lancez est achevé avec failure', recipientProviders: [buildUser()], subject: 'Build failed', to: 'yasmine.manita@esprit.tn'
        }
    }
    */
}
} 